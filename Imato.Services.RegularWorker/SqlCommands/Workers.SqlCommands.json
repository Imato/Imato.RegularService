[
  {
    "name": "GetConfigTable",
    "contextVendor": "mssql",
    "text": "select top 1 schema_name(t.schema_id) + '.' + t.name from sys.tables t where name like 'config%'"
  },
  {
    "name": "GetConfigTable",
    "contextVendor": "postgres",
    "text": "select table_name from information_schema.tables where table_name like 'config%' limit 1;"
  },
  {
    "name": "GetConfigAsync",
    "contextVendor": "mssql",
    "text": "select top 1 Id, Name, Value from {0} where Name = @name"
  },
  {
    "name": "GetConfigAsync",
    "contextVendor": "postgres",
    "text": "select id, name, value from {0} where name = @name limit 1;"
  },
  {
    "name": "UpdateConfigAsync",
    "contextVendor": "mssql",
    "text": "update {0} set Value = @Value where Name = @Name; if @@ROWCOUNT = 0 insert into {0} (Name, Value) values (@Name, @Value);"
  },
  {
    "name": "UpdateConfigAsync",
    "contextVendor": "postgres",
    "text": "declare r int; begin update configs set value = @Value where name = @Name; get diagnostics r = row_count; if r = 0 then insert into configs (name, value) values (@Name, @Value); end if;"
  },
  {
    "name": "CreateWorkersTable",
    "contextVendor": "mssql",
    "text": "if object_id('dbo.Workers') is null begin create table dbo.Workers (id int not null identity(1, 1), name varchar(255) not null, host varchar(255) not null, appName varchar(512) not null default '', date datetime not null, settings varchar(2000) not null, active bit not null); alter table dbo.Workers add constraint Workers__PK primary key (id); alter table dbo.Workers add constraint Workers__UK unique (name, host, appName); end"
  },
  {
    "name": "CreateWorkersTable",
    "contextVendor": "postgres",
    "text": "create table if not exists workers (id int not null generated always as identity primary key, name varchar(255) not null, host varchar(255) not null, appName varchar(512) not null default '', date timestamp not null, settings json not null, active bool not null, unique (name, host, appName));"
  },
  {
    "name": "GetStatus",
    "contextVendor": "mssql",
    "text": "select top 1 * from dbo.Workers where name = @name and host = @host and appName = @appName"
  },
  {
    "name": "GetStatus",
    "contextVendor": "postgres",
    "text": "select * from workers where name = @name and host = @host and appName = @appName limit 1;"
  },
  {
    "name": "GetHostCount",
    "contextVendor": "mssql",
    "text": "select count(1) from dbo.Workers where name = @workerName and date >= dateadd(millisecond, -@statusTimeout, getdate())"
  },
  {
    "name": "GetHostCount",
    "contextVendor": "postgres",
    "text": "select count(1) from workers where name = @workerName and date >= now() - (@statusTimeout / 1000 * interval'1 second');"
  },
  {
    "name": "GetOtherHostCount",
    "contextVendor": "mssql",
    "text": "select count(1) from dbo.Workers where name = @workerName and host != @host and date >= dateadd(millisecond, -@statusTimeout, getdate()) and active = 1"
  },
  {
    "name": "GetOtherHostCount",
    "contextVendor": "postgres",
    "text": "select count(1) from workers where name = @workerName and host != @host and date >= now() - (@statusTimeout / 1000 * interval'1 second');"
  },
  {
    "name": "SetStatus",
    "contextVendor": "mssql",
    "text": "update dbo.Workers set date = @date, active = @active where (@id > 0 and id = @id) or (host = @host and name = @name and appName = @appName); if @@ROWCOUNT = 0 insert into dbo.Workers (name, host, appName, date, settings, active) values (@name, @host, @appName, @date, @settings, @active); select top 1 * from dbo.Workers where (@id > 0 and id = @id) or (host = @host and name = @name and appName = @appName);"
  },
  {
    "name": "SetStatus",
    "contextVendor": "postgres",
    "text": "insert into workers (name, host, appName, date, settings, active) values (@name, @host, @appName, @date, @settings, @active) on conflict(name) do update set \"date\" = @date, active = @active; select * from workers where (@id > 0 and id = @id) or (host = @host and name = @name and appName = @appName);"
  },
  {
    "name": "GetLastLogs",
    "contextVendor": "mssql",
    "text": "select top  * from {1} order by 1;"
  },
  {
    "name": "GetLastLogs",
    "contextVendor": "postgres",
    "text": "select * from {1} order by 1 limit {0};"
  }
]